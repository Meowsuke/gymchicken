// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================
// User & Auth Models
// ===============================
model User {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String     @unique
  emailVerified DateTime?  @db.Timestamp(6)
  password      String
  image         String?
  exercises     Exercise[]

  sessions Session[]
  tokens   VerificationToken[]

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

// ===============================
// Authentication Support Models
// ===============================
model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  userId     String   @db.Uuid
  User       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([identifier, token])
}

// ===============================
// Fitness Models
// ===============================
model Exercise {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  categoryColor String
  muscle        String
  date          DateTime
  sets          Set[]
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)
}

model Set {
  id         String   @id @default(uuid()) @db.Uuid
  exerciseId String   @db.Uuid
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  weight     Float
  reps       Int
}
